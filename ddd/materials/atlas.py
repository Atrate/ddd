# ddd - D1D2D3
# Library for simple scene modelling.
# Jose Juan Montes 2020

import logging
import plistlib
import sys

from trimesh.visual.material import SimpleMaterial


# Get instance of logger for this module
logger = logging.getLogger(__name__)


class TextureAtlasSprite():

    def __init__(self, name, bounds_pixel, bounds_norm, rot):
        self.name = name
        self.bounds_pixel = bounds_pixel
        self.bounds_norm = bounds_norm
        self.rot = rot
        #self.texture =

    def __repr__(self):
        return "%s (%s, %s, rot=%s)" % (self.name, self.bounds_pixel, self.bounds_norm, self.rot)


class TextureAtlas():
    """
    TODO: Support multiple textures atlas (wrap texture atlas and materials, allow to retrieving sprite+material)
    """

    def __init__(self):

        self.sprites = {}
        #self.texture = None
        self.texture_width = None
        self.texture_height = None

    @staticmethod
    def load_atlas(filepath):
        """
        Process a Texture Atlas definition file, in
        PropertyList file (plistlib) format generated by PyTexturePack.
        """

        # Open file
        with open(filepath, 'rb') as fp:
            pl = plistlib.load(fp)

        atlas = TextureAtlas()
        texture_size = pl['metadata']['size'][1:-1].split(",")
        atlas.texture_width = int(texture_size[0])
        atlas.texture_height = int(texture_size[1])

        # Process it
        #print(pl)
        for key, frame in pl['frames'].items():
            bounds_str = frame['frame']
            bounds_str_split = bounds_str[1:-1].split(",")
            bounds_str_min, bounds_str_max = ",".join(bounds_str_split[:2]), ",".join(bounds_str_split[2:]),
            bounds_str_min = bounds_str_min[1:-1].split(",")
            bounds_str_max = bounds_str_max[1:-1].split(",")
            bounds_pixel = [int(bounds_str_min[0]), int(bounds_str_min[1]),
                            int(bounds_str_min[0]) + int(bounds_str_max[0]), int(bounds_str_min[1]) + int(bounds_str_max[1])]
            bounds_norm = [bounds_pixel[0] / atlas.texture_width, bounds_pixel[1] / atlas.texture_height,
                           bounds_pixel[2] / atlas.texture_width, bounds_pixel[3] / atlas.texture_height]
            rotated = frame['rotated']
            sprite = TextureAtlasSprite(key, bounds_pixel, bounds_norm, rotated)
            atlas.sprites[key.lower()] = sprite

        logger.info("Loaded texture atlas %s with %d sprites.", filepath, len(atlas.sprites))

        return atlas

    def keys(self):
        return list(self.sprites.keys())

    def sprite(self, key):
        return self.sprites[key]

